What is buffer?
A buffer is a temporary storage space(ram) for binary data. In Node.js, a buffer is a special type of object that allows you to work with raw binary data directly in memory. 
  //Buffers are particularly useful when dealing with I/O operations such as reading from or writing to a file or communicating over a network.
  // Since JavaScript strings are UTF-16 encoded, they are not suitable for working with binary data, such as file content or network streams.

Key Characteristics of Buffers
Fixed-Size: Buffers have a fixed size, meaning their length cannot be altered once they are created.
Binary Data: They are designed to handle raw binary data, unlike regular JavaScript strings that handle text data.
Globally Available â€” No need to require() the Buffer class.
Efficient Memory Usage: Buffers provide a way to manage memory efficiently, allowing for the manipulation 
                         //of binary data without the overhead of converting to and from text.

Use Cases
File Operations: Reading and writing binary files such as images or audio.
Network Operations: Sending and receiving data over TCP or HTTP protocols.
Data Streaming: Handling data from streams such as file streams, network streams, or process streams.


Using alloc() Method:
let buff = new Buffer.alloc(5);
console.log(buff);

equals() Method:
let name1 = new Buffer.alloc(4, "Name");
let name2 = new Buffer.alloc(4, "Name");
console.log(new Buffer.from(name1).equals(name2));

copy() Method:
let buff = new Buffer.alloc(5, "Geeks");
let name1 = new Buffer.alloc(5, "Name");
buff.copy(name1);
console.log(name1.toString());